// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/task"
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	lable      *string
	isComplete *bool
	predicates []predicate.Task
}

// Where adds a new predicate for the builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetLable sets the lable field.
func (tu *TaskUpdate) SetLable(s string) *TaskUpdate {
	tu.lable = &s
	return tu
}

// SetIsComplete sets the isComplete field.
func (tu *TaskUpdate) SetIsComplete(b bool) *TaskUpdate {
	tu.isComplete = &b
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(tu.driver.Dialect())
		selector = builder.Select(task.FieldID).From(builder.Table(task.Table))
	)
	for _, p := range tu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := tu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(task.Table).Where(sql.InInts(task.FieldID, ids...))
	)
	if value := tu.lable; value != nil {
		updater.Set(task.FieldLable, *value)
	}
	if value := tu.isComplete; value != nil {
		updater.Set(task.FieldIsComplete, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	id         int
	lable      *string
	isComplete *bool
}

// SetLable sets the lable field.
func (tuo *TaskUpdateOne) SetLable(s string) *TaskUpdateOne {
	tuo.lable = &s
	return tuo
}

// SetIsComplete sets the isComplete field.
func (tuo *TaskUpdateOne) SetIsComplete(b bool) *TaskUpdateOne {
	tuo.isComplete = &b
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (t *Task, err error) {
	var (
		builder  = sql.Dialect(tuo.driver.Dialect())
		selector = builder.Select(task.Columns...).From(builder.Table(task.Table))
	)
	task.ID(tuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		t = &Task{config: tuo.config}
		if err := t.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Task: %v", err)
		}
		id = t.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Task with id: %v", tuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Task with the same id: %v", tuo.id)
	}

	tx, err := tuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(task.Table).Where(sql.InInts(task.FieldID, ids...))
	)
	if value := tuo.lable; value != nil {
		updater.Set(task.FieldLable, *value)
		t.Lable = *value
	}
	if value := tuo.isComplete; value != nil {
		updater.Set(task.FieldIsComplete, *value)
		t.IsComplete = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
