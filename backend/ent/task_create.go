// Code generated by entc, DO NOT EDIT.

package ent

import (
	"backend/ent/task"
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	uid      *uint32
	lable    *string
	complete *bool
}

// SetUID sets the uid field.
func (tc *TaskCreate) SetUID(u uint32) *TaskCreate {
	tc.uid = &u
	return tc
}

// SetLable sets the lable field.
func (tc *TaskCreate) SetLable(s string) *TaskCreate {
	tc.lable = &s
	return tc
}

// SetComplete sets the complete field.
func (tc *TaskCreate) SetComplete(b bool) *TaskCreate {
	tc.complete = &b
	return tc
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if tc.uid == nil {
		return nil, errors.New("ent: missing required field \"uid\"")
	}
	if err := task.UIDValidator(*tc.uid); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"uid\": %v", err)
	}
	if tc.lable == nil {
		return nil, errors.New("ent: missing required field \"lable\"")
	}
	if tc.complete == nil {
		return nil, errors.New("ent: missing required field \"complete\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	var (
		builder = sql.Dialect(tc.driver.Dialect())
		t       = &Task{config: tc.config}
	)
	tx, err := tc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(task.Table).Default()
	if value := tc.uid; value != nil {
		insert.Set(task.FieldUID, *value)
		t.UID = *value
	}
	if value := tc.lable; value != nil {
		insert.Set(task.FieldLable, *value)
		t.Lable = *value
	}
	if value := tc.complete; value != nil {
		insert.Set(task.FieldComplete, *value)
		t.Complete = *value
	}
	id, err := insertLastID(ctx, tx, insert.Returning(task.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	t.ID = int(id)
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
