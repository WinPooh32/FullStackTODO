// Code generated by entc, DO NOT EDIT.

package task

import (
	"backend/ent/predicate"

	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v uint32) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldUID), v))
		},
	)
}

// Lable applies equality check predicate on the "lable" field. It's identical to LableEQ.
func Lable(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldLable), v))
		},
	)
}

// Complete applies equality check predicate on the "complete" field. It's identical to CompleteEQ.
func Complete(v bool) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldComplete), v))
		},
	)
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v uint32) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldUID), v))
		},
	)
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v uint32) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldUID), v))
		},
	)
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...uint32) predicate.Task {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldUID), v...))
		},
	)
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...uint32) predicate.Task {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldUID), v...))
		},
	)
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v uint32) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldUID), v))
		},
	)
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v uint32) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldUID), v))
		},
	)
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v uint32) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldUID), v))
		},
	)
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v uint32) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldUID), v))
		},
	)
}

// LableEQ applies the EQ predicate on the "lable" field.
func LableEQ(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldLable), v))
		},
	)
}

// LableNEQ applies the NEQ predicate on the "lable" field.
func LableNEQ(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldLable), v))
		},
	)
}

// LableIn applies the In predicate on the "lable" field.
func LableIn(vs ...string) predicate.Task {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldLable), v...))
		},
	)
}

// LableNotIn applies the NotIn predicate on the "lable" field.
func LableNotIn(vs ...string) predicate.Task {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldLable), v...))
		},
	)
}

// LableGT applies the GT predicate on the "lable" field.
func LableGT(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldLable), v))
		},
	)
}

// LableGTE applies the GTE predicate on the "lable" field.
func LableGTE(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldLable), v))
		},
	)
}

// LableLT applies the LT predicate on the "lable" field.
func LableLT(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldLable), v))
		},
	)
}

// LableLTE applies the LTE predicate on the "lable" field.
func LableLTE(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldLable), v))
		},
	)
}

// LableContains applies the Contains predicate on the "lable" field.
func LableContains(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldLable), v))
		},
	)
}

// LableHasPrefix applies the HasPrefix predicate on the "lable" field.
func LableHasPrefix(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldLable), v))
		},
	)
}

// LableHasSuffix applies the HasSuffix predicate on the "lable" field.
func LableHasSuffix(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldLable), v))
		},
	)
}

// LableEqualFold applies the EqualFold predicate on the "lable" field.
func LableEqualFold(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldLable), v))
		},
	)
}

// LableContainsFold applies the ContainsFold predicate on the "lable" field.
func LableContainsFold(v string) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldLable), v))
		},
	)
}

// CompleteEQ applies the EQ predicate on the "complete" field.
func CompleteEQ(v bool) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldComplete), v))
		},
	)
}

// CompleteNEQ applies the NEQ predicate on the "complete" field.
func CompleteNEQ(v bool) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldComplete), v))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			for _, p := range predicates {
				p(s)
			}
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			for i, p := range predicates {
				if i > 0 {
					s.Or()
				}
				p(s)
			}
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
