// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Lable holds the value of the "lable" field.
	Lable string `json:"lable,omitempty"`
	// IsComplete holds the value of the "isComplete" field.
	IsComplete bool `json:"isComplete,omitempty"`
}

// FromRows scans the sql response data into Task.
func (t *Task) FromRows(rows *sql.Rows) error {
	var vt struct {
		ID         int
		Lable      sql.NullString
		IsComplete sql.NullBool
	}
	// the order here should be the same as in the `task.Columns`.
	if err := rows.Scan(
		&vt.ID,
		&vt.Lable,
		&vt.IsComplete,
	); err != nil {
		return err
	}
	t.ID = vt.ID
	t.Lable = vt.Lable.String
	t.IsComplete = vt.IsComplete.Bool
	return nil
}

// Update returns a builder for updating this Task.
// Note that, you need to call Task.Unwrap() before calling this method, if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return (&TaskClient{t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", lable=")
	builder.WriteString(t.Lable)
	builder.WriteString(", isComplete=")
	builder.WriteString(fmt.Sprintf("%v", t.IsComplete))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

// FromRows scans the sql response data into Tasks.
func (t *Tasks) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vt := &Task{}
		if err := vt.FromRows(rows); err != nil {
			return err
		}
		*t = append(*t, vt)
	}
	return nil
}

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
